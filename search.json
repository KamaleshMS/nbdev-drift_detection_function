[
  {
    "objectID": "Data_Drift_Function.html",
    "href": "Data_Drift_Function.html",
    "title": "Data Drift Function",
    "section": "",
    "text": "This function helps to detect whether there is any drift in the data provided.\n\n\nsource\n\ndata_drift_test_selection\n\n data_drift_test_selection (user_input:int,\n                            ref_data:pandas.core.frame.DataFrame,\n                            cur_data:pandas.core.frame.DataFrame)\n\n\nSelects the appropriate data drift test suite based on user input and runs the tests.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nuser_input\nint\nUser input to select the type of data drift test suite.\n\n\nref_data\nDataFrame\nReference dataset.\n\n\ncur_data\nDataFrame\nCurrent dataset.\n\n\nReturns\nTestSuite\nThe test suite containing the data drift tests.\n\n\n\n\nsource\n\n\n\ndetect_drift\n\n detect_drift (X:pandas.core.frame.DataFrame,\n               window_size:Union[str,int]=None)\n\n\nDetect data drift in a dataset.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nX\nDataFrame\n\nInput dataset\n\n\nwindow_size\ntyping.Union[str, int]\nNone\nWindow size for detecting data drift. Default is None.\n\n\nReturns\ntyping.Generator[typing.Tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame], NoneType, NoneType]\n\nCurrent chunk and next chunk of data.\n\n\n\n\nsource\n\n\n\nrun_data_drift_detection\n\n run_data_drift_detection ()\n\n\nRuns the data drift detection on the dataset.\n\ndef main():\n    \"\"\"\n    Main function to run the data drift detection.\n    \"\"\"\n    run_data_drift_detection()\n\nif __name__ == \"__main__\":\n    main()\n\n&lt;generator object detect_drift&gt;\nCurrent Chunk:\n                    Time  Electricity_load\n0   2011-01-01 00:15:00              5.98\n1   2011-01-01 00:30:00              8.45\n2   2011-01-01 00:45:00              9.93\n3   2011-01-01 01:00:00              6.92\n4   2011-01-01 01:15:00              5.90\n..                  ...               ...\n95  2011-01-02 00:00:00             23.59\n96  2011-01-02 00:15:00             30.22\n97  2011-01-02 00:30:00             31.37\n98  2011-01-02 00:45:00             30.89\n99  2011-01-02 01:00:00             27.51\n\n[100 rows x 2 columns]\nNext Chunk:\n                     Time  Electricity_load\n100  2011-01-02 01:15:00             23.28\n101  2011-01-02 01:30:00             30.18\n102  2011-01-02 01:45:00             29.70\n103  2011-01-02 02:00:00             24.97\n104  2011-01-02 02:15:00             27.83\n..                   ...               ...\n195  2011-01-03 01:00:00             29.18\n196  2011-01-03 01:15:00             30.69\n197  2011-01-03 01:30:00             30.71\n198  2011-01-03 01:45:00             28.21\n199  2011-01-03 02:00:00             37.65\n\n[100 rows x 2 columns]\n------------------\nCurrent Chunk:\n                    Time  Electricity_load\n0   2011-01-01 00:15:00              5.98\n1   2011-01-01 00:30:00              8.45\n2   2011-01-01 00:45:00              9.93\n3   2011-01-01 01:00:00              6.92\n4   2011-01-01 01:15:00              5.90\n..                  ...               ...\n95  2011-01-02 00:00:00             23.59\n96  2011-01-02 00:15:00             30.22\n97  2011-01-02 00:30:00             31.37\n98  2011-01-02 00:45:00             30.89\n99  2011-01-02 01:00:00             27.51\n\n[100 rows x 2 columns]\nNext Chunk:\n                     Time  Electricity_load\n200  2011-01-03 02:15:00             29.07\n201  2011-01-03 02:30:00             36.21\n202  2011-01-03 02:45:00             36.20\n203  2011-01-03 03:00:00             37.40\n204  2011-01-03 03:15:00             33.98\n..                   ...               ...\n295  2011-01-04 02:00:00             34.62\n296  2011-01-04 02:15:00             39.64\n297  2011-01-04 02:30:00             33.20\n298  2011-01-04 02:45:00             33.99\n299  2011-01-04 03:00:00             33.25\n\n[100 rows x 2 columns]\n------------------\nCurrent Chunk:\n                    Time  Electricity_load\n0   2011-01-01 00:15:00              5.98\n1   2011-01-01 00:30:00              8.45\n2   2011-01-01 00:45:00              9.93\n3   2011-01-01 01:00:00              6.92\n4   2011-01-01 01:15:00              5.90\n..                  ...               ...\n95  2011-01-02 00:00:00             23.59\n96  2011-01-02 00:15:00             30.22\n97  2011-01-02 00:30:00             31.37\n98  2011-01-02 00:45:00             30.89\n99  2011-01-02 01:00:00             27.51\n\n[100 rows x 2 columns]\nNext Chunk:\n                     Time  Electricity_load\n300  2011-01-04 03:15:00             32.32\n301  2011-01-04 03:30:00             39.05\n302  2011-01-04 03:45:00             33.20\n303  2011-01-04 04:00:00             40.69\n304  2011-01-04 04:15:00             34.53\n..                   ...               ...\n395  2011-01-05 03:00:00             45.22\n396  2011-01-05 03:15:00             44.52\n397  2011-01-05 03:30:00             45.92\n398  2011-01-05 03:45:00             43.94\n399  2011-01-05 04:00:00             38.37\n\n[100 rows x 2 columns]\n------------------\nCurrent Chunk:\n                    Time  Electricity_load\n0   2011-01-01 00:15:00              5.98\n1   2011-01-01 00:30:00              8.45\n2   2011-01-01 00:45:00              9.93\n3   2011-01-01 01:00:00              6.92\n4   2011-01-01 01:15:00              5.90\n..                  ...               ...\n95  2011-01-02 00:00:00             23.59\n96  2011-01-02 00:15:00             30.22\n97  2011-01-02 00:30:00             31.37\n98  2011-01-02 00:45:00             30.89\n99  2011-01-02 01:00:00             27.51\n\n[100 rows x 2 columns]\nNext Chunk:\n                     Time  Electricity_load\n400  2011-01-05 04:15:00             47.30\n401  2011-01-05 04:30:00             43.42\n402  2011-01-05 04:45:00             37.61\n403  2011-01-05 05:00:00             47.38\n404  2011-01-05 05:15:00             40.19\n..                   ...               ...\n495  2011-01-06 04:00:00             52.84\n496  2011-01-06 04:15:00             54.99\n497  2011-01-06 04:30:00             49.22\n498  2011-01-06 04:45:00             50.45\n499  2011-01-06 05:00:00             50.74\n\n[100 rows x 2 columns]\n------------------\nCurrent Chunk:\n                    Time  Electricity_load\n0   2011-01-01 00:15:00              5.98\n1   2011-01-01 00:30:00              8.45\n2   2011-01-01 00:45:00              9.93\n3   2011-01-01 01:00:00              6.92\n4   2011-01-01 01:15:00              5.90\n..                  ...               ...\n95  2011-01-02 00:00:00             23.59\n96  2011-01-02 00:15:00             30.22\n97  2011-01-02 00:30:00             31.37\n98  2011-01-02 00:45:00             30.89\n99  2011-01-02 01:00:00             27.51\n\n[100 rows x 2 columns]\nNext Chunk:\n                     Time  Electricity_load\n500  2011-01-06 05:15:00             55.23\n501  2011-01-06 05:30:00             51.88\n502  2011-01-06 05:45:00             51.71\n503  2011-01-06 06:00:00             46.29\n504  2011-01-06 06:15:00             55.59\n..                   ...               ...\n595  2011-01-07 05:00:00             62.93\n596  2011-01-07 05:15:00             63.00\n597  2011-01-07 05:30:00             51.62\n598  2011-01-07 05:45:00             55.13\n599  2011-01-07 06:00:00             51.60\n\n[100 rows x 2 columns]\n------------------\nCurrent Chunk:\n                    Time  Electricity_load\n0   2011-01-01 00:15:00              5.98\n1   2011-01-01 00:30:00              8.45\n2   2011-01-01 00:45:00              9.93\n3   2011-01-01 01:00:00              6.92\n4   2011-01-01 01:15:00              5.90\n..                  ...               ...\n95  2011-01-02 00:00:00             23.59\n96  2011-01-02 00:15:00             30.22\n97  2011-01-02 00:30:00             31.37\n98  2011-01-02 00:45:00             30.89\n99  2011-01-02 01:00:00             27.51\n\n[100 rows x 2 columns]\nNext Chunk:\n                     Time  Electricity_load\n600  2011-01-07 06:15:00             53.16\n601  2011-01-07 06:30:00             53.75\n602  2011-01-07 06:45:00             63.79\n603  2011-01-07 07:00:00             50.58\n604  2011-01-07 07:15:00             51.21\n605  2011-01-07 07:30:00             65.69\n606  2011-01-07 07:45:00             56.20\n607  2011-01-07 08:00:00             56.15\n608  2011-01-07 08:15:00             60.37\n609  2011-01-07 08:30:00             54.09\n610  2011-01-07 08:45:00             63.71\n611  2011-01-07 09:00:00             57.42\n612  2011-01-07 09:15:00             63.50\n613  2011-01-07 09:30:00             63.27\n614  2011-01-07 09:45:00             66.21\n615  2011-01-07 10:00:00             62.27\n616  2011-01-07 10:15:00             61.35\n617  2011-01-07 10:30:00             63.00\n618  2011-01-07 10:45:00             57.09\n619  2011-01-07 11:00:00             62.45\n620  2011-01-07 11:15:00             58.74\n621  2011-01-07 11:30:00             57.34\n622  2011-01-07 11:45:00             55.03\n623  2011-01-07 12:00:00             55.42\n624  2011-01-07 12:15:00             56.55\n625  2011-01-07 12:30:00             59.36\n626  2011-01-07 12:45:00             58.43\n627  2011-01-07 13:00:00             57.35\n628  2011-01-07 13:15:00             59.26\n629  2011-01-07 13:30:00             69.89\n630  2011-01-07 13:45:00             60.57\n631  2011-01-07 14:00:00             69.65\n632  2011-01-07 14:15:00             55.25\n633  2011-01-07 14:30:00             55.65\n634  2011-01-07 14:45:00             66.84\n635  2011-01-07 15:00:00             54.47\n636  2011-01-07 15:15:00             67.93\n637  2011-01-07 15:30:00             58.61\n638  2011-01-07 15:45:00             59.44\n639  2011-01-07 16:00:00             61.80\n640  2011-01-07 16:15:00             65.85\n641  2011-01-07 16:30:00             60.27\n------------------"
  },
  {
    "objectID": "nbdev_tutorial.html",
    "href": "nbdev_tutorial.html",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "",
    "text": "To get started with nbdev, you need to install a few prerequisites. Follow these steps to install the required tools and libraries:\n\n\n\nInstall Python\nChoose a Python Package Manager\nInstall Jupyter Notebook\nLaunch Jupyter Notebook\n\n\n\n\n\n\nInstall Python by visiting the official Python website: python.org.\n\n\n\n\n\n\n\nChoose a Python package manager based on your preferences and requirements.\n\n\n\n\n\n\n\nInstall Jupyter Notebook using the selected package manager:\n\n\n\n\n\nCode Cell (for conda):\n\n\n\n\n!conda install -c conda-forge -y jupyterlab\n\n\n\n\nCode Cell (for pip):\n\n\n\n\n!pip install jupyterlab\n\n\n\n\n\nLaunch Jupyter Notebook by running the following command in a terminal or command prompt:\n\n\n!jupyter lab\n\n\nI have used ! or % in every code cells. But it is not necessary for you to use them if these commands are executed in your terminal and not from jupyter notebook.\n\n\n\nThe exclamation mark (!) before a command in Jupyter Notebook represents a “magic command.” Magic commands are special commands provided by IPython, the interactive Python kernel used by Jupyter Notebook.\n\n\n\n\nThe exclamation mark is used to indicate that the command should be executed in a system shell or command-line interface, rather than within the Python kernel.\n\n\n\n\nWhen you prefix a line with ! in a code cell, Jupyter Notebook sends that line to the system shell for execution. It allows you to run system commands, install packages, execute shell scripts, and perform other shell-related operations directly from your notebook.\n\n\n\n\nFor example, when you run !pip install numpy, Jupyter Notebook executes the command pip install numpy in the system shell, installing the numpy package.\n\n\n\n\nMagic commands in Jupyter Notebook provide additional functionality and convenience for interacting with the underlying system and enhancing the notebook experience. They are called “magic” because they provide a special syntax and perform tasks beyond the standard Python execution.\n\n\n\n\nThere are two types of magic commands in Jupyter Notebook:\n\n\n\n\n\nLine magics: Line magics start with a single % character and are used for a single line of execution.\n\n\n\n\n\n\nCell magics: Cell magics start with %% and are used for entire code cells.\n\n\n\n\n\n\nThe exclamation mark (!) is a shorthand notation for using line magics in Jupyter Notebook. It allows you to execute system shell commands conveniently within your notebook.\n\n\n\n\nBy using magic commands, you can seamlessly integrate system commands and Python code within your notebook, making it a versatile tool for interactive computing and data analysis."
  },
  {
    "objectID": "nbdev_tutorial.html#installation",
    "href": "nbdev_tutorial.html#installation",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "",
    "text": "To get started with nbdev, you need to install a few prerequisites. Follow these steps to install the required tools and libraries:\n\n\n\nInstall Python\nChoose a Python Package Manager\nInstall Jupyter Notebook\nLaunch Jupyter Notebook\n\n\n\n\n\n\nInstall Python by visiting the official Python website: python.org.\n\n\n\n\n\n\n\nChoose a Python package manager based on your preferences and requirements.\n\n\n\n\n\n\n\nInstall Jupyter Notebook using the selected package manager:\n\n\n\n\n\nCode Cell (for conda):\n\n\n\n\n!conda install -c conda-forge -y jupyterlab\n\n\n\n\nCode Cell (for pip):\n\n\n\n\n!pip install jupyterlab\n\n\n\n\n\nLaunch Jupyter Notebook by running the following command in a terminal or command prompt:\n\n\n!jupyter lab\n\n\nI have used ! or % in every code cells. But it is not necessary for you to use them if these commands are executed in your terminal and not from jupyter notebook.\n\n\n\nThe exclamation mark (!) before a command in Jupyter Notebook represents a “magic command.” Magic commands are special commands provided by IPython, the interactive Python kernel used by Jupyter Notebook.\n\n\n\n\nThe exclamation mark is used to indicate that the command should be executed in a system shell or command-line interface, rather than within the Python kernel.\n\n\n\n\nWhen you prefix a line with ! in a code cell, Jupyter Notebook sends that line to the system shell for execution. It allows you to run system commands, install packages, execute shell scripts, and perform other shell-related operations directly from your notebook.\n\n\n\n\nFor example, when you run !pip install numpy, Jupyter Notebook executes the command pip install numpy in the system shell, installing the numpy package.\n\n\n\n\nMagic commands in Jupyter Notebook provide additional functionality and convenience for interacting with the underlying system and enhancing the notebook experience. They are called “magic” because they provide a special syntax and perform tasks beyond the standard Python execution.\n\n\n\n\nThere are two types of magic commands in Jupyter Notebook:\n\n\n\n\n\nLine magics: Line magics start with a single % character and are used for a single line of execution.\n\n\n\n\n\n\nCell magics: Cell magics start with %% and are used for entire code cells.\n\n\n\n\n\n\nThe exclamation mark (!) is a shorthand notation for using line magics in Jupyter Notebook. It allows you to execute system shell commands conveniently within your notebook.\n\n\n\n\nBy using magic commands, you can seamlessly integrate system commands and Python code within your notebook, making it a versatile tool for interactive computing and data analysis."
  },
  {
    "objectID": "nbdev_tutorial.html#installation-and-setup-of-nbdev-quarto",
    "href": "nbdev_tutorial.html#installation-and-setup-of-nbdev-quarto",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "Installation and Setup of nbdev, Quarto",
    "text": "Installation and Setup of nbdev, Quarto\n\n\nInstall nbdev\nSet up nbdev\nInstall Quarto\nSet up Quarto with JupyterLab\n\n\n\nInstall nbdev \n\n\nTo begin, We start by installing nbdev, which is a Python library that provides a framework for developing libraries and documentation using Jupyter notebooks.\n\n\n\n!pip install nbdev\n\n\n\nSet up nbdev \n\n\nAfter installing nbdev, we need to set it up for our project. This involves creating the necessary folder structure and configuration files.\n\n\n\n!nbdev_new\n\n\n\nAfter installing nbdev, we need to set it up for our project.\n\n\n\n\nThe nbdev_new command creates the necessary folder structure and configuration files for nbdev. It sets up the project with the required directories, such as docs, nbs, tests, and your_project_name.\n\n\n\n\nMake sure to replace your_project_name with the desired name for your nbdev project.\n\n\n\n\nInstall Quarto \n\n\nQuarto is a powerful publishing system for creating scientific and technical documents from Jupyter notebooks. Let’s install it now.\n\n\n\n!pip install quarto\n\n\n\nSet up Quarto with JupyterLab \n\n\nTo use Quarto with JupyterLab, we need to install the JupyterLab extension for Quarto.\n\n\n\n\n\nThis extension integrates Quarto into JupyterLab, allowing you to create and publish documents using Quarto’s features.\n\n\n\n\n!quarto install --lab"
  },
  {
    "objectID": "nbdev_tutorial.html#create-an-empty-github-repo",
    "href": "nbdev_tutorial.html#create-an-empty-github-repo",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "Create an Empty GitHub Repo ",
    "text": "Create an Empty GitHub Repo \n\nBefore we start working on our nbdev project, we need to create an empty GitHub repository to hold our code and documentation. Follow these steps to create a new GitHub repository:\n\n\n\n\nOpen the GitHub web interface in your browser and log in to your account.\n\n\n\n\n\n\nClick on the “+” icon in the top-right corner and select “New repository” from the dropdown menu.\n\n\n\n\n\n\nEnter a name for your repository and an optional description.\n\n\n\n\n\n\nChoose whether you want the repository to be public or private.\n\n\n\n\n\n\nLeave the “Initialize this repository with a README” option unchecked.\n\n\n\n\n\n\nClick the “Create repository” button to create the empty repository.\n\n\n\n\n\n\nIf you still find it difficult, can refer github’s create new repo page.\n\n\n\n\n\n\nIf you’re using the web interface, it should look something like this (with your own repository name and descrpition) before you click “Create Repository”:"
  },
  {
    "objectID": "nbdev_tutorial.html#initialize-your-repo-with-nbdev",
    "href": "nbdev_tutorial.html#initialize-your-repo-with-nbdev",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "Initialize Your Repo with nbdev ",
    "text": "Initialize Your Repo with nbdev \n\nNow that we have created the GitHub repository, let’s initialize it with nbdev. Follow these steps to initialize your repository:\n\n\n\n\nOpen a terminal or command prompt on your local machine.\n\n\n\n\n\n\nNavigate to the directory where you want to clone the GitHub repository.\n\n\n\n\n\n\nRun the following command to clone the repository:\n\n\n\n\n# Run the following command to clone the repository:\n!git clone &lt;repository_url&gt;\n\n\nThis command creates a copy of the repository on your local machine. It will create a new directory with the same name as the repository and download all the files and commit history from the remote repository.\n\n\n# Change to the directory of your cloned repository:\n\n\nThis cell changes the working directory to the directory where you have cloned your repository. Replace  with the actual directory path.\n\n\n# Initialize your repository with nbdev using the following command:\n!nbdev_new &lt;project_name&gt;\n\n\nThis cell initializes your repository with nbdev. Replace  with the desired name for your project. This command creates the necessary files and folder structure for your nbdev project.\n\n\n\nnbdev_new assumes that your package name is the same as your repo name (with - replaced by _). Use the –lib_name option if that isn’t the case.\n\n\n\n\nDouble-check your settings.ini file to ensure that it has all of the correct information.\n\n\n\n\n\nYou will be now redirected to your new repo.\n\n\n\n\nThen commit and push your additions to GitHub:\n\n\n\n!git add .\n!git commit -m'Initial commit'\n!git push"
  },
  {
    "objectID": "nbdev_tutorial.html#enable-github-pages",
    "href": "nbdev_tutorial.html#enable-github-pages",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "Enable GitHub Pages ",
    "text": "Enable GitHub Pages \n\nTo enable GitHub Pages for your repository, follow these steps:\n\n\n\n\nGo to your repository’s “Settings” tab.\n\n\n\n\n\n\nScroll down to the “GitHub Pages” section.\n\n\n\n\n\n\nUnder “Source”, select the “gh-pages” branch from the dropdown menu.\n\n\n\n\n\n\nClick the “Save” button.\n\n\n\n\n\n\nGitHub will build your pages and provide you with a URL where you can access your documentation.\n\n\n\n\n\n\nYou need to enable GitHub Pages for your repo by following the above steps."
  },
  {
    "objectID": "nbdev_tutorial.html#check-out-your-workflows",
    "href": "nbdev_tutorial.html#check-out-your-workflows",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "Check Out Your Workflows ",
    "text": "Check Out Your Workflows \n\nnbdev includes predefined workflows for continuous integration (CI) and deploying your documentation to GitHub Pages. The “CI” workflow runs tests and linters on your code whenever you push changes to your repository. The “Deploy to GitHub Pages” workflow builds and deploys your documentation to GitHub Pages.Let’s check out these workflows:\n\n\n\n\nOpen the “Actions” tab in your repository on GitHub.\n\n\n\n\n\n\nYou will see two workflows: “CI” and “Deploy to GitHub Pages”.\n\n\n\n\n\n\nYou need to check out your workflows by following the above steps."
  },
  {
    "objectID": "nbdev_tutorial.html#check-out-your-docs",
    "href": "nbdev_tutorial.html#check-out-your-docs",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "Check Out Your Docs ",
    "text": "Check Out Your Docs \n\nOnce the “Deploy to GitHub Pages” workflow has completed successfully, you can check out your documentation:\n\n\n\n\nWait for the “pages build and deployment” workflow to complete. You can monitor the progress in the “Actions” tab.\n\n\n\n\n\n\nOnce the workflow is finished, open your website using the provided URL. This is the URL where your documentation is hosted. You should see your documentation website with the initial content generated by nbdev.\n\n\n\n\n\n\nYou need to check out your docs by following the above steps.\n\n\n\n\n\nWait for the workflow run to complete, then open your website. By default it should be available at: https://{user}.github.io/{repo}"
  },
  {
    "objectID": "nbdev_tutorial.html#set-up-autoreload",
    "href": "nbdev_tutorial.html#set-up-autoreload",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "Set up Autoreload ",
    "text": "Set up Autoreload \n\nSince you’ll be often updating your modules from one notebook, and using them in another, it’s helpful if your notebook automatically reads in the new modules as soon as the Python file changes. To make this happen, just add these lines to the top of your notebook:"
  },
  {
    "objectID": "nbdev_tutorial.html#set-up-prerequisites",
    "href": "nbdev_tutorial.html#set-up-prerequisites",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "Set up Prerequisites ",
    "text": "Set up Prerequisites \n\nIf your module requires other modules as dependencies, you can add those prerequisites to your settings.ini in the requirements section. The requirements should be separated by a space and if the module requires at least or at most a specific version of the requirement this may be specified here, too.\n\n\n\n\nYou have to cross check whether the required packages along with their version is mentioned in the requirements of settings.ini file."
  },
  {
    "objectID": "nbdev_tutorial.html#make-your-first-edit",
    "href": "nbdev_tutorial.html#make-your-first-edit",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "Make Your First Edit ",
    "text": "Make Your First Edit \n\nNow, let’s make our first edit to the documentation and see how it updates.\n\n\n\n\nInstall nbdev’s hooks by running the following command in your terminal or command prompt:\n\n\n\n\n# Run the following command to install nbdev's hooks:\n!nbdev_install_hooks\n\n\nThe nbdev_install_hooks command is used to install nbdev’s Git hooks in your local repository. Git hooks are scripts that are automatically executed at specific points during the Git workflow.\n\n\n\nBy installing nbdev’s Git hooks, you can automate certain checks and validations before committing or pushing changes to your repository. The pre-commit hook ensures that checks like linting, code formatting, and notebook validation are performed before a commit is made. This helps maintain code quality and ensures that your project adheres to certain standards.\n\n\n\n!nbdev_build_lib\n\n\nThis code cell builds the Python library from the Jupyter notebooks in your project. It converts the notebooks into Python modules and places them in the appropriate directory. It also generates an init.py file that allows you to import your library’s functions as modules.\n\n\n# Use the nbdev_export command to create Python modules for your notebooks:\n!nbdev_export\n\n\nThis code cell runs the nbdev_export command, which creates Python modules for your notebooks. This command converts your notebook code cells into Python modules that can be imported and used by other users of your library.\n\n\n# Install your package using pip:\n!pip install -e '.[dev]'\n\n\nThis code cell installs your package using the pip install -e command. The -e flag allows you to install the package in editable mode, which means any changes you make to the code will be immediately reflected without needing to reinstall.\n\n\n!nbdev_build_docs\n\n\nThe nbdev_build_docs helps you ensure that your documentation is up to date with the latest changes in your notebooks. It allows you to review the documentation, make any necessary adjustments, and provide a good resource for users to refer to when working with your library or package.\n\n\n# Start the preview of your docs using nbdev:\n!nbdev_preview\n\n\nThis code cell starts the preview of your documentation using the nbdev_preview command. This command launches a local web server that allows you to preview your documentation in a web browser."
  },
  {
    "objectID": "nbdev_tutorial.html#edit-00_core.ipynb",
    "href": "nbdev_tutorial.html#edit-00_core.ipynb",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "Edit 00_core.ipynb ",
    "text": "Edit 00_core.ipynb \n\nLet’s now make an edit to the 00_core.ipynb notebook, which is the main notebook of our library.\n\n\n\n\nOpen the 00_core.ipynb file in Jupyter Notebook.\n\n\n\n\n\n\nUpdate the notebook metadata and default export module according to your library’s needs.\n\n\n\n\n\n\nSave the notebook and rerun all cells to export the modules. Your changes will be reflected in the generated Python modules and documentation."
  },
  {
    "objectID": "nbdev_tutorial.html#add-your-own-function",
    "href": "nbdev_tutorial.html#add-your-own-function",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "Add Your Own Function ",
    "text": "Add Your Own Function \n\nLet’s add a new function to our library. Follow these steps:\n\n\n\n\nAdd a new code cell in the 00_core.ipynb notebook.\n\n\n\n\n\n\nDefine your function in the code cell.\n\n\n\n\n\n\nUse the #| export directive to specify that this function should be exported.\n\n\n\n\n\n\nSave the notebook and rerun all cells to update the modules. Your new function will be available in the generated Python modules and can be imported and used by other users of your library."
  },
  {
    "objectID": "nbdev_tutorial.html#add-examples-tests-and-docs",
    "href": "nbdev_tutorial.html#add-examples-tests-and-docs",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "Add Examples, Tests, and Docs ",
    "text": "Add Examples, Tests, and Docs \n\nIt’s important to provide examples, tests, and documentation for your library. Follow these steps:\n\n\n\n\nAdd regular code cells below your function’s code cell to provide examples of how to use the function.\n\n\n\n\n\n\nAdd test cells using assertions or the fastcore.test functions to test your function’s behavior.\n\n\n\n\n\n\nInclude plots, images, or widgets in your examples if desired.\n\n\n\n\n\n\nSave the notebook and rerun all cells to update the modules and documentation. Your examples, tests, and documentation will be included in the generated Python modules and documentation.\n\n\n\n\ndef calculate_total_cost(item_price: float, # The price of a single item.\n                         quantity: int, # The quantity of items.  \n                         discount: float = 0, # The discount rate as a decimal value. Defaults to 0.\n                         tax_rate: float = 0, # The tax rate as a decimal value. Defaults to 0.\n                        ) -&gt; float: # The total cost of the items, including any applicable discount and tax.\n    \"\"\"\n    Calculate the total cost of an item or items, taking into account the quantity, discount, and tax rate.\n\n    Raises:\n        ValueError: If item_price or quantity is negative.\n\n    \"\"\"\n    if item_price &lt; 0 or quantity &lt; 0:\n        raise ValueError(\"Item price and quantity must be non-negative.\")\n\n    subtotal = item_price * quantity\n    total_discount = subtotal * discount\n    total_tax = subtotal * tax_rate\n\n    total_cost = subtotal - total_discount + total_tax\n    return total_cost\n\n\n\ncalculate_total_cost\n\n calculate_total_cost (item_price:float, quantity:int, discount:float=0,\n                       tax_rate:float=0)\n\nCalculate the total cost of an item or items, taking into account the quantity, discount, and tax rate.\nRaises: ValueError: If item_price or quantity is negative.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nitem_price\nfloat\n\nThe price of a single item.\n\n\nquantity\nint\n\nThe quantity of items.\n\n\ndiscount\nfloat\n0\nThe discount rate as a decimal value. Defaults to 0.\n\n\ntax_rate\nfloat\n0\nThe tax rate as a decimal value. Defaults to 0.\n\n\nReturns\nfloat\n\nThe total cost of the items, including any applicable discount and tax.\n\n\n\n\n# Example usage\nitem_price = 10.99\nquantity = 5\ndiscount = 0.1\ntax_rate = 0.08\n\ntotal_cost = calculate_total_cost(item_price, quantity, discount, tax_rate)\ntotal_cost"
  },
  {
    "objectID": "nbdev_tutorial.html#prepare-your-changes",
    "href": "nbdev_tutorial.html#prepare-your-changes",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "Prepare Your Changes ",
    "text": "Prepare Your Changes \n\nBefore committing your changes, it’s a good practice to run the nbdev_prepare command in the terminal or command prompt. This command performs several tasks to prepare your repository:\n\n\n\n\nBuilds the .py modules from the notebooks.\n\n\n\n\n\n\nRuns tests on the notebooks.\n\n\n\n\n\n\nCleans the notebooks.\n\n\n\n\n\n\nUpdates the README.md file with the contents of the index.ipynb notebook.\n\n\n\n\n\nRun the following command to prepare your changes:\n\n\n\n# Run the following command to prepare your changes:\n!nbdev_prepare\n\n\nThis code cell runs the nbdev_prepare command in the terminal or command prompt. This command performs several actions, including building the .py modules, testing the notebooks, cleaning the notebooks, and updating the README.md file.\n\n\n\nThe nbdev_prepare command performs a series of tasks to prepare your nbdev project for a commit. It ensures that your project is in a clean and organized state before you push your changes to the remote repository. The nbdev_prepare command includes the following commands:\n\n\n\n\n\nnbdev_build_lib: This command converts the Jupyter notebooks in your project into Python modules. It creates .py files for each notebook and places them in the appropriate project directories. This step is crucial for making your code accessible as importable modules.\n\n\n\n\n\n\nnbdev_clean_nbs: This command removes unnecessary metadata from your Jupyter notebooks. It cleans up the notebooks by removing execution counts, cell outputs, and other metadata that is not relevant for code distribution or documentation. This step helps keep your notebooks clean and focused on the code and documentation content.\n\n\n\n\n\n\nnbdev_diff_nbs: This command compares the notebook code cells with the corresponding Python modules to detect any inconsistencies. It identifies any code changes in the notebooks that have not been reflected in the Python modules. This step helps ensure that your code is synchronized between the notebooks and the modules.\n\n\n\n\n\n\nnbdev_fix_merge: This command helps resolve merge conflicts that may arise when working with notebooks and modules in a collaborative environment. It applies the necessary fixes to merge conflicts, allowing you to reconcile changes from different branches or contributors.\n\n\n\n\n\n\nnbdev_install_git_hooks: This command installs Git hooks in your project repository. Git hooks are scripts that are executed at specific points in the Git workflow, such as before committing or before pushing. These hooks can perform actions like running tests, linting code, or checking for code formatting. Installing Git hooks helps automate these checks and ensures that code quality standards are maintained.\n\n\n\n\n\nBy running the nbdev_prepare command, you ensure that your project is properly built, cleaned, and synchronized, and that it adheres to the necessary Git workflow and quality checks. It sets your project up for a successful commit and push to the remote repository.\n\n\n\n# Commit your changes using Git:\n!git add .\n!git commit -m \"Add my new function and examples\"\n\n\n# Push your changes to GitHub:\n!git push origin main\n\n\nThis code cell performs the Git commands to commit and push your changes to the remote repository. It adds all the modified files (git add .), commits the changes with a message (git commit -m “Update documentation”), and pushes the changes to the main branch of the remote repository (git push origin main).\n\n\n\nAfter pushing your changes, three actions will be performed: deployment, CI, and GitHub Pages.\n\n\n\n\nIf all three actions are successful, your commit is successful, and you can view your deployment at the provided URL.\n\n\n\n\nCommon errors that could be encountered include the “No module found” error, which happens when a developer forgets to add dependencies in the settings.ini file. Make sure to double-check and update the settings.ini file with the required dependencies for your project. It’s highlighted in the settings.ini image above.\n\n\n\n\n\nCode for nbdev_export.\n\n\n\n\n#| hide is a directive (like #| default_exp) which excludes a cell from both your exported module and docs\n\n\n\n\nnbdev_export is the command used to export your notebooks to Python modules."
  },
  {
    "objectID": "nbdev_tutorial.html#common-errors-and-their-solutions",
    "href": "nbdev_tutorial.html#common-errors-and-their-solutions",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "Common Errors and their Solutions ",
    "text": "Common Errors and their Solutions \n\nHere are a few common errors that you may encounter while working on documentation using nbdev, along with their solutions:\n\n\n\nImport Errors: This error occurs when you try to import a module or function that is not properly defined or not present in the generated Python modules. It can happen if you forget to add the #| export directive to the code cell containing the function or if there is a typo in the import statement.\n\n\n\n\n\nSolution: Double-check that the code cell defining the function has the #| export directive. Also, verify that the import statement in the notebook or in other modules is correctly referencing the function from the generated Python modules.\n\n\n\n\n\nBuild Failures: Sometimes, during the nbdev_build_lib step, you may encounter build failures due to syntax errors, unresolved dependencies, or incompatible code.\n\n\n\n\n\nSolution: Review the error message to identify the cause of the build failure. Check for syntax errors in your code, ensure that all required dependencies are specified in the settings.ini file, and resolve any compatibility issues. Once you fix the errors, run nbdev_build_lib again.\n\n\n\n\n\nDocumentation Formatting Issues: If you encounter issues with the formatting of your generated documentation, such as incorrect rendering of Markdown cells, missing sections, or broken links, it could be due to incorrect formatting or missing metadata in the notebooks.\n\n\n\n\n\nSolution: Review your notebooks and ensure that the Markdown cells are properly formatted with appropriate headings, bullet points, and links. Verify that the notebook metadata, such as toc, title, and keywords, are correctly specified. Rerun the necessary cells or notebooks to regenerate the documentation with the correct formatting.\n\n\n\n\n\nFailure in Tests: If your tests fail during the nbdev_test_nbs step, it means that the code in your notebooks is not producing the expected output or behavior.\n\n\n\n\n\nSolution: Review the failed tests and the associated error messages to identify the cause of the failure. Check your code for logical errors, incorrect calculations, or missing assertions. Modify your code or test cases accordingly until the tests pass successfully.\n\n\n\n\n\nGitHub Action Workflow Errors: While working with GitHub Actions, you may encounter errors related to workflow setup, configuration, or dependency management.\n\n\n\n\n\nSolution: Review the workflow files (usually located in the .github/workflows directory) and ensure that the configurations are correct. Check for any typos, missing dependencies, or incorrect setup steps. Additionally, refer to the GitHub Actions documentation for troubleshooting guidance specific to your issue.\n\n\n\n\nRemember that thorough testing, careful code review, and attention to detail can help you avoid many common errors. If you encounter any issues, don’t hesitate to refer to the nbdev documentation."
  },
  {
    "objectID": "nbdev_tutorial.html#video-tutorial-for-nbdev-documentation",
    "href": "nbdev_tutorial.html#video-tutorial-for-nbdev-documentation",
    "title": "Getting Started with nbdev: A Beginner’s Tutorial",
    "section": "Video Tutorial for nbdev Documentation ",
    "text": "Video Tutorial for nbdev Documentation"
  },
  {
    "objectID": "nbs/core.html",
    "href": "nbs/core.html",
    "title": "core",
    "section": "",
    "text": "foo\n\n foo ()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev-drift_detection_function",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev-drift_detection_function",
    "section": "Install",
    "text": "Install\npip install nbdev_drift_detection_function"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev-drift_detection_function",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2"
  }
]